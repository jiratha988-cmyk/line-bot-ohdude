from flask import Flask, request, abort
from linebot.v3 import WebhookHandler
from linebot.v3.messaging import MessagingApi, ReplyMessageRequest, TextMessage
from linebot.v3.webhooks import MessageEvent, TextMessageContent, LeaveEvent, JoinEvent
from linebot.v3.exceptions import InvalidSignatureError
import os
import re

app = Flask(__name__)

channel_access_token = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
channel_secret = os.getenv("LINE_CHANNEL_SECRET")

handler = WebhookHandler(channel_secret)
line_bot_api = MessagingApi(channel_access_token)

GROUP_NAME_DEFAULT = "‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô"

@app.route("/", methods=["GET"])
def home():
    return "LINE Bot is running!"

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers["X-Line-Signature"]
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return "OK"

@handler.add(MessageEvent, message=TextMessageContent)
def handle_message(event):
    user_msg = event.message.text
    user_id = event.source.user_id
    group_id = event.source.group_id if hasattr(event.source, 'group_id') else None

    # ‚úÖ ‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå LINE ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå (ohshop)
    if "line.me" in user_msg and "ohshop" not in user_msg:
        line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text="‚ùå ‡∏´‡πâ‡∏≤‡∏°‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå LINE ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á Ohshop ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö")]
            )
        )

@handler.add(JoinEvent)
def handle_join(event):
    line_bot_api.reply_message(
        ReplyMessageRequest(
            reply_token=event.reply_token,
            messages=[TextMessage(text="üëã ‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤! ‡∏à‡∏∞‡∏Ñ‡∏≠‡∏¢‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÅ‡∏•‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö")]
        )
    )

@handler.add(LeaveEvent)
def handle_leave(event):
    # ‡∏ö‡∏≠‡∏ó‡πÇ‡∏î‡∏ô‡πÄ‡∏ï‡∏∞‡∏≠‡∏≠‡∏Å ‚Äî ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
    # ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á admin ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ LINE Notify ‡∏´‡∏£‡∏∑‡∏≠ Push ‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    print("‚ùå ‡∏ö‡∏≠‡∏ó‡πÇ‡∏î‡∏ô‡πÄ‡∏ï‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°")

if __name__ == "__main__":
    app.run()
