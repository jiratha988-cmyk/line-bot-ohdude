from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import *
import os
import re

app = Flask(__name__)

line_bot_api = LineBotApi(os.getenv("LINE_CHANNEL_ACCESS_TOKEN"))
handler = WebhookHandler(os.getenv("LINE_CHANNEL_SECRET"))

@app.route("/")
def index():
    return "Bot is running..."

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers["X-Line-Signature"]
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return "OK"

# ‡∏ü‡∏±‡∏á‡∏Ñ‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à link
def is_bad_link(text):
    if "http" in text or "https" in text:
        if "ohshop.line.me" not in text:
            return True
    return False

# ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°
@handler.add(SourceGroup, event=JoinEvent)
def handle_join(event):
    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text="‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡πâ‡∏≤ ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏∞‡∏à‡πä‡∏∞ ‚ù§Ô∏è")
    )

@handler.add(MemberJoinedEvent)
def welcome(event):
    for member in event.joined.members:
        if isinstance(member, SourceUser):
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {member.user_id} ‡∏à‡πâ‡∏≤ ‚ú®")
            )

@handler.add(MessageEvent, message=TextMessage)
def handle_text(event):
    text = event.message.text

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°
    if is_bad_link(text):
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ üö´")
        )
        return

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ line.me ‡∏´‡∏£‡∏∑‡∏≠ QR
    if re.search(r"(line\.me|qr code|qr|add me|‡πÅ‡∏≠‡∏î‡πÑ‡∏•‡∏ô‡πå)", text, re.IGNORECASE):
        if "ohshop" not in text:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏∞‡πÑ‡∏•‡∏ô‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ ‚ùå")
            )
            return

@handler.add(GroupNameChangedEvent)
def handle_group_name_change(event):
    group_id = event.source.group_id
    original_name = "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô Ohshop"
    line_bot_api.set_group_name(group_id, original_name)

    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text="‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤ üîí")
    )

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
