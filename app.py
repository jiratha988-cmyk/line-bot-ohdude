from flask import Flask, request, abort
from linebot.v3.webhooks import WebhookHandler, MessageEvent, TextMessageContent, JoinEvent, MemberLeftEvent
from linebot.v3.messaging import MessagingApi, Configuration, ReplyMessageRequest, TextMessage, PushMessageRequest
from linebot.v3.exceptions import InvalidSignatureError
import os
import re

app = Flask(__name__)

# ‚úÖ ‡πÉ‡∏ä‡πâ Configuration ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á token ‡∏ï‡∏£‡∏á ‡πÜ
channel_access_token = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
channel_secret = os.getenv("LINE_CHANNEL_SECRET")

config = Configuration(access_token=channel_access_token)
handler = WebhookHandler(channel_secret)
line_bot_api = MessagingApi(config)

EXPECTED_GROUP_NAME = "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤Oh!dudeVip"  # üëà ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ

# üö´ ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå + ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°
@handler.add(MessageEvent)
def handle_message(event):
    if isinstance(event.message, TextMessageContent):
        msg = event.message.text.lower()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        if ("http://" in msg or "https://" in msg or "line.me" in msg or "qr" in msg or "‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå" in msg) and "ohshop" not in msg:
            warning = "üö´ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏á‡∏î‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô Ohshop"
            line_bot_api.reply_message(
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text=warning)]
                )
            )

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°
        if event.source.type == "group":
            try:
                group_id = event.source.group_id
                group_summary = line_bot_api.get_group_summary(group_id)
                current_name = group_summary.group_name

                if current_name != EXPECTED_GROUP_NAME:
                    alert = f"‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô: {EXPECTED_GROUP_NAME}"
                    line_bot_api.reply_message(
                        ReplyMessageRequest(
                            reply_token=event.reply_token,
                            messages=[TextMessage(text=alert)]
                        )
                    )
            except Exception as e:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ:", e)

# üëã ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°
@handler.add(JoinEvent)
def handle_join(event):
    welcome_msg = "üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡πâ‡∏≤! ‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÅ‡∏•‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Ohshop ‡∏ô‡∏∞‡∏à‡πä‡∏∞"
    line_bot_api.reply_message(
        ReplyMessageRequest(
            reply_token=event.reply_token,
            messages=[TextMessage(text=welcome_msg)]
        )
    )

# üë§ ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
@handler.add(MemberLeftEvent)
def handle_member_left(event):
    try:
        group_id = event.source.group_id
        alert = "‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÇ‡∏î‡∏ô‡πÄ‡∏ï‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏á"
        line_bot_api.push_message(
            PushMessageRequest(
                to=group_id,
                messages=[TextMessage(text=alert)]
            )
        )
    except Exception as e:
        print("‚ùå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", e)

# -------------------------------
@app.route("/", methods=["GET"])
def home():
    return "LINE Bot is running!"

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers.get("X-Line-Signature", "")
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)

    return "OK"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
