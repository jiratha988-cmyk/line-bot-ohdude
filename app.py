from flask import Flask, request, abort
from linebot.v3 import WebhookHandler
from linebot.v3.messaging import (
    MessagingApi,
    ReplyMessageRequest,
    TextMessage,
    PushMessageRequest,
)
from linebot.v3.webhooks import (
    MessageEvent,
    TextMessageContent,
    JoinEvent,
    MemberLeftEvent,
    MemberJoinedEvent,
    UnfollowEvent,
)
from linebot.v3.exceptions import InvalidSignatureError
from linebot.v3.models import Configuration
import os
import re
import logging

app = Flask(__name__)

# Logging
logging.basicConfig(level=logging.INFO)

# ENV
channel_access_token = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
channel_secret = os.getenv("LINE_CHANNEL_SECRET")

configuration = Configuration(access_token=channel_access_token)
handler = WebhookHandler(channel_secret)
line_bot_api = MessagingApi(configuration)

# ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
DEFAULT_GROUP_NAME = "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ Oh!dudeVip (6)"

@app.route("/", methods=["GET"])
def home():
    return "LINE Bot is running!"

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers.get("X-Line-Signature")
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)

    return "OK"

@handler.add(MessageEvent, message=TextMessageContent)
def handle_message(event):
    user_message = event.message.text

    # ‡∏£‡∏µ‡∏û‡∏•‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
    if event.reply_token:
        # ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ohshop
        if "line.me" in user_message and "ohshop" not in user_message:
            line_bot_api.reply_message(
                ReplyMessageRequest(
                    reply_token=event.reply_token,
                    messages=[TextMessage(text="‚ùå ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ä‡∏£‡πå‡∏•‡∏¥‡∏á‡∏Å‡πå LINE ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô Oh!shop ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ")]
                )
            )
            return

        # ‡∏£‡∏µ‡∏û‡∏•‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
        line_bot_api.reply_message(
            ReplyMessageRequest(
                reply_token=event.reply_token,
                messages=[TextMessage(text=f"‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤: {user_message}")]
            )
        )

@handler.add(MemberLeftEvent)
def handle_member_left(event):
    left_user_id = event.left.members[0].user_id
    group_id = event.source.group_id

    try:
        line_bot_api.push_message(
            PushMessageRequest(
                to=group_id,
                messages=[TextMessage(text="üö´ ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°")]
            )
        )
    except Exception as e:
        logging.error(f"Error sending member left message: {e}")

@handler.add(MemberJoinedEvent)
def handle_member_joined(event):
    joined_user_id = event.joined.members[0].user_id
    group_id = event.source.group_id

    try:
        line_bot_api.push_message(
            PushMessageRequest(
                to=group_id,
                messages=[TextMessage(text="üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Å‡∏•‡∏∏‡πà‡∏° Oh!dude")]
            )
        )
    except Exception as e:
        logging.error(f"Error sending welcome message: {e}")

@handler.add(JoinEvent)
def handle_join(event):
    group_id = event.source.group_id

    try:
        # ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
        line_bot_api.push_message(
            PushMessageRequest(
                to=group_id,
                messages=[TextMessage(text="ü§ñ ‡∏ö‡∏≠‡∏ó‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡∏Ñ‡∏≠‡∏¢‡∏î‡∏π‡πÅ‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö")]
            )
        )
    except Exception as e:
        logging.error(f"Error on join: {e}")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äî ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á webhook ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö GroupNameUpdateEvent (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô v3 SDK ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ event ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ logic ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ)
# ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏±‡∏î‡πÅ‡∏õ‡∏•‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ cron job ‡∏´‡∏£‡∏∑‡∏≠ manual API get group summary

if __name__ == "__main__":
    app.run()
